name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to TestPyPI first'
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  id-token: write  # Required for trusted publishing

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools-scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools>=65 setuptools-scm
        # Install all build requirements for no-isolation build
        pip install -r requirements.txt || true
    
    - name: Build distribution packages
      run: |
        # Clean any existing build artifacts and caches
        rm -rf build/ dist/ *.egg-info src/*.egg-info
        find . -type d -name "*.egg-info" -exec rm -rf {} + || true
        find . -type d -name "__pycache__" -exec rm -rf {} + || true
        rm -rf ~/.cache/pip
        # Ensure clean pyproject.toml processing
        python -m pip cache purge
        # Build fresh packages with no build isolation to ensure clean metadata
        python -m build --no-isolation
        ls -la dist/
    
    - name: Check distribution packages
      run: |
        pip install check-wheel-contents twine
        check-wheel-contents dist/*.whl
        twine check --strict dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: dist/
        retention-days: 7

  test-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi == 'true'
    environment: test-pypi
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
    
    - name: Test installation from TestPyPI
      run: |
        python -m pip install --upgrade pip
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ spotify-scraper
        python -c "import spotify_scraper; print(f'Installed version: {spotify_scraper.__version__}')"

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi != 'true')
    environment: pypi
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/
    
    # Temporarily use token-based authentication until trusted publishing is configured
    - name: Publish to PyPI using token
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload --non-interactive --skip-existing dist/*
    
    # Alternative: Use trusted publishing (requires PyPI configuration)
    # - name: Publish to PyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     verbose: true
    #     print-hash: true

  verify:
    needs: publish
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Wait for PyPI to update
      run: sleep 60
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Verify installation from PyPI
      run: |
        python -m pip install --upgrade pip
        pip install spotify-scraper
        python -c "import spotify_scraper; print(f'Successfully installed version: {spotify_scraper.__version__}')"
        spotify-scraper --version
    
    - name: Create GitHub Release Assets
      if: github.event_name == 'release'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Download artifacts
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          console.log('Release upload completed successfully');