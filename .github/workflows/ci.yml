name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint
        pip install -e ".[dev]"
    
    - name: Check formatting with black
      run: black --check src/ tests/
    
    - name: Check import sorting with isort
      run: isort --check-only src/ tests/
    
    - name: Lint with flake8
      run: flake8 src/ tests/
    
    - name: Type checking with mypy
      run: mypy src/ || true  # Allow mypy to fail for now
    
    - name: Lint with pylint
      run: pylint src/ || true  # Allow pylint to fail for now

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce build time
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests with pytest
      run: |
        pytest -v --cov=spotify_scraper --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage data
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data
        path: |
          coverage.xml
          htmlcov/
        retention-days: 7

  coverage:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage data
      uses: actions/download-artifact@v4
      with:
        name: coverage-data
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build distribution packages
      run: |
        python -m build
        python setup.py sdist bdist_wheel
    
    - name: Check distribution packages
      run: |
        pip install check-wheel-contents twine
        check-wheel-contents dist/*.whl
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7

  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.12']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download built packages
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
    
    - name: Test wheel installation (Unix)
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl
        python -c "import spotify_scraper; print(spotify_scraper.__version__)"
        spotify-scraper --version
    
    - name: Test wheel installation (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl
        python -c "import spotify_scraper; print(spotify_scraper.__version__)"
        spotify-scraper --version
    
    - name: Test sdist installation (Unix)
      if: runner.os != 'Windows'
      run: |
        pip uninstall -y spotify-scraper
        pip install dist/*.tar.gz
        python -c "import spotify_scraper; print(spotify_scraper.__version__)"
        spotify-scraper --version
    
    - name: Test sdist installation (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        pip uninstall -y spotify-scraper
        pip install dist/*.tar.gz
        python -c "import spotify_scraper; print(spotify_scraper.__version__)"
        spotify-scraper --version