name: Manual Test

on:
  workflow_dispatch:
    inputs:
      test-type:
        description: 'Type of test to run'
        required: true
        type: choice
        options:
          - unit
          - integration
          - all
          - specific
      test-pattern:
        description: 'Test pattern (for specific tests)'
        required: false
        type: string
        default: ''
      python-version:
        description: 'Python version'
        required: true
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
        default: '3.11'
      os:
        description: 'Operating System'
        required: true
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        default: ubuntu-latest
      verbose:
        description: 'Verbose output'
        required: false
        type: boolean
        default: false

jobs:
  manual-test:
    runs-on: ${{ inputs.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ inputs.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ inputs.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run unit tests
      if: inputs.test-type == 'unit' || inputs.test-type == 'all'
      run: |
        VERBOSE_FLAG=""
        if [[ "${{ inputs.verbose }}" == "true" ]]; then
          VERBOSE_FLAG="-vv"
        fi
        pytest tests/unit/ $VERBOSE_FLAG --tb=short
    
    - name: Run integration tests
      if: inputs.test-type == 'integration' || inputs.test-type == 'all'
      run: |
        VERBOSE_FLAG=""
        if [[ "${{ inputs.verbose }}" == "true" ]]; then
          VERBOSE_FLAG="-vv"
        fi
        pytest tests/integration/ $VERBOSE_FLAG --tb=short
    
    - name: Run specific tests
      if: inputs.test-type == 'specific' && inputs.test-pattern != ''
      run: |
        VERBOSE_FLAG=""
        if [[ "${{ inputs.verbose }}" == "true" ]]; then
          VERBOSE_FLAG="-vv"
        fi
        pytest -k "${{ inputs.test-pattern }}" $VERBOSE_FLAG --tb=short
    
    - name: Run all tests
      if: inputs.test-type == 'all'
      run: |
        VERBOSE_FLAG=""
        if [[ "${{ inputs.verbose }}" == "true" ]]; then
          VERBOSE_FLAG="-vv"
        fi
        pytest $VERBOSE_FLAG --tb=short --cov=spotify_scraper --cov-report=term-missing
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ inputs.os }}-py${{ inputs.python-version }}
        path: |
          .coverage
          htmlcov/
          pytest-report.xml
        retention-days: 7