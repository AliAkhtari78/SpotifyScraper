[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spotifyscraper"
version = "2.0.1"
description = "Python library for extracting data from Spotify without authentication"
readme = "README.md"
authors = [
    {name = "Ali Akhtari", email = "aliakhtari78@hotmail.com"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Sound/Audio",
]
keywords = ["spotify", "scraper", "music", "api", "download"]
dependencies = [
    "requests>=2.25.0",
    "beautifulsoup4>=4.9.0",
    "lxml>=4.9.0",
    "pyyaml>=6.0",
    "eyeD3>=0.9.5",
]
requires-python = ">=3.8"

[project.urls]
Homepage = "https://github.com/AliAkhtari78/SpotifyScraper"
Documentation = "https://spotifyscraper.readthedocs.io/"
Repository = "https://github.com/AliAkhtari78/SpotifyScraper.git"
"Bug Tracker" = "https://github.com/AliAkhtari78/SpotifyScraper/issues"
Changelog = "https://github.com/AliAkhtari78/SpotifyScraper/blob/master/CHANGELOG.md"

[project.optional-dependencies]
selenium = [
    "selenium>=4.0.0",
]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-mock>=3.12.0",
    "black>=24.2.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "pylint>=3.0.0",
    "mypy>=1.8.0",
    "bandit[toml]>=1.7.7",
    "pre-commit>=3.5.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-mock>=3.12.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]
all = [
    "spotifyscraper[selenium,dev,test,docs]",
]

[project.scripts]
spotify-scraper = "spotify_scraper.__main__:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.bandit]
targets = ["src"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["src/spotify_scraper"]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
precision = 2

[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.0"
version_files = [
    "pyproject.toml:version",
    "src/spotify_scraper/__init__.py:__version__",
]
update_changelog_on_bump = true
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"],
]